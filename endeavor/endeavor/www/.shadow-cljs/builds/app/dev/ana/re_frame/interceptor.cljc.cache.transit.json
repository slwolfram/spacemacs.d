["^ ","~:output",["^ ","~:js","goog.provide('re_frame.interceptor');\nre_frame.interceptor.mandatory_interceptor_keys = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"after\",\"after\",594996914),null,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),null,new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),null], null), null);\nre_frame.interceptor.interceptor_QMARK_ = (function re_frame$interceptor$interceptor_QMARK_(m){\nreturn ((cljs.core.map_QMARK_(m)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(re_frame.interceptor.mandatory_interceptor_keys,cljs.core.set(cljs.core.keys(m)))));\n});\nre_frame.interceptor.__GT_interceptor = (function re_frame$interceptor$__GT_interceptor(var_args){\nvar args__4870__auto__ = [];\nvar len__4864__auto___22439 = arguments.length;\nvar i__4865__auto___22440 = (0);\nwhile(true){\nif((i__4865__auto___22440 < len__4864__auto___22439)){\nargs__4870__auto__.push((arguments[i__4865__auto___22440]));\n\nvar G__22441 = (i__4865__auto___22440 + (1));\ni__4865__auto___22440 = G__22441;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4871__auto__ = ((((0) < args__4870__auto__.length))?(new cljs.core.IndexedSeq(args__4870__auto__.slice((0)),(0),null)):null);\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(argseq__4871__auto__);\n});\n\n(re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic = (function (p__22423){\nvar map__22424 = p__22423;\nvar map__22424__$1 = cljs.core.__destructure_map(map__22424);\nvar m = map__22424__$1;\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__22424__$1,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092));\nvar before = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__22424__$1,new cljs.core.Keyword(null,\"before\",\"before\",-1633692388));\nvar after = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__22424__$1,new cljs.core.Keyword(null,\"after\",\"after\",594996914));\nif(re_frame.interop.debug_enabled_QMARK_){\nvar temp__5751__auto___22442 = cljs.core.seq(clojure.set.difference.cljs$core$IFn$_invoke$arity$2(cljs.core.set(cljs.core.keys(m)),re_frame.interceptor.mandatory_interceptor_keys));\nif(temp__5751__auto___22442){\nvar unknown_keys_22443 = temp__5751__auto___22442;\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: ->interceptor\",m,\"has unknown keys:\",unknown_keys_22443], 0));\n} else {\n}\n} else {\n}\n\nreturn new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),(function (){var or__4253__auto__ = id;\nif(cljs.core.truth_(or__4253__auto__)){\nreturn or__4253__auto__;\n} else {\nreturn new cljs.core.Keyword(null,\"unnamed\",\"unnamed\",-26044928);\n}\n})(),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),before,new cljs.core.Keyword(null,\"after\",\"after\",594996914),after], null);\n}));\n\n(re_frame.interceptor.__GT_interceptor.cljs$lang$maxFixedArity = (0));\n\n/** @this {Function} */\n(re_frame.interceptor.__GT_interceptor.cljs$lang$applyTo = (function (seq22422){\nvar self__4852__auto__ = this;\nreturn self__4852__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq22422));\n}));\n\nre_frame.interceptor.get_effect = (function re_frame$interceptor$get_effect(var_args){\nvar G__22426 = arguments.length;\nswitch (G__22426) {\ncase 1:\nreturn re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1 = (function (context){\nreturn new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292).cljs$core$IFn$_invoke$arity$1(context);\n}));\n\n(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2 = (function (context,key){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null));\n}));\n\n(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3 = (function (context,key,not_found){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null),not_found);\n}));\n\n(re_frame.interceptor.get_effect.cljs$lang$maxFixedArity = 3);\n\nre_frame.interceptor.assoc_effect = (function re_frame$interceptor$assoc_effect(context,key,value){\nreturn cljs.core.assoc_in(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null),value);\n});\nre_frame.interceptor.update_effect = (function re_frame$interceptor$update_effect(var_args){\nvar args__4870__auto__ = [];\nvar len__4864__auto___22445 = arguments.length;\nvar i__4865__auto___22446 = (0);\nwhile(true){\nif((i__4865__auto___22446 < len__4864__auto___22445)){\nargs__4870__auto__.push((arguments[i__4865__auto___22446]));\n\nvar G__22447 = (i__4865__auto___22446 + (1));\ni__4865__auto___22446 = G__22447;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4871__auto__ = ((((3) < args__4870__auto__.length))?(new cljs.core.IndexedSeq(args__4870__auto__.slice((3)),(0),null)):null);\nreturn re_frame.interceptor.update_effect.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4871__auto__);\n});\n\n(re_frame.interceptor.update_effect.cljs$core$IFn$_invoke$arity$variadic = (function (context,key,f,args){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$5(cljs.core.update_in,context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null),f,args);\n}));\n\n(re_frame.interceptor.update_effect.cljs$lang$maxFixedArity = (3));\n\n/** @this {Function} */\n(re_frame.interceptor.update_effect.cljs$lang$applyTo = (function (seq22427){\nvar G__22428 = cljs.core.first(seq22427);\nvar seq22427__$1 = cljs.core.next(seq22427);\nvar G__22429 = cljs.core.first(seq22427__$1);\nvar seq22427__$2 = cljs.core.next(seq22427__$1);\nvar G__22430 = cljs.core.first(seq22427__$2);\nvar seq22427__$3 = cljs.core.next(seq22427__$2);\nvar self__4851__auto__ = this;\nreturn self__4851__auto__.cljs$core$IFn$_invoke$arity$variadic(G__22428,G__22429,G__22430,seq22427__$3);\n}));\n\nre_frame.interceptor.get_coeffect = (function re_frame$interceptor$get_coeffect(var_args){\nvar G__22432 = arguments.length;\nswitch (G__22432) {\ncase 1:\nreturn re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1 = (function (context){\nreturn new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985).cljs$core$IFn$_invoke$arity$1(context);\n}));\n\n(re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2 = (function (context,key){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null));\n}));\n\n(re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$3 = (function (context,key,not_found){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null),not_found);\n}));\n\n(re_frame.interceptor.get_coeffect.cljs$lang$maxFixedArity = 3);\n\nre_frame.interceptor.assoc_coeffect = (function re_frame$interceptor$assoc_coeffect(context,key,value){\nreturn cljs.core.assoc_in(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null),value);\n});\nre_frame.interceptor.update_coeffect = (function re_frame$interceptor$update_coeffect(var_args){\nvar args__4870__auto__ = [];\nvar len__4864__auto___22449 = arguments.length;\nvar i__4865__auto___22450 = (0);\nwhile(true){\nif((i__4865__auto___22450 < len__4864__auto___22449)){\nargs__4870__auto__.push((arguments[i__4865__auto___22450]));\n\nvar G__22451 = (i__4865__auto___22450 + (1));\ni__4865__auto___22450 = G__22451;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4871__auto__ = ((((3) < args__4870__auto__.length))?(new cljs.core.IndexedSeq(args__4870__auto__.slice((3)),(0),null)):null);\nreturn re_frame.interceptor.update_coeffect.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4871__auto__);\n});\n\n(re_frame.interceptor.update_coeffect.cljs$core$IFn$_invoke$arity$variadic = (function (context,key,f,args){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$5(cljs.core.update_in,context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null),f,args);\n}));\n\n(re_frame.interceptor.update_coeffect.cljs$lang$maxFixedArity = (3));\n\n/** @this {Function} */\n(re_frame.interceptor.update_coeffect.cljs$lang$applyTo = (function (seq22433){\nvar G__22434 = cljs.core.first(seq22433);\nvar seq22433__$1 = cljs.core.next(seq22433);\nvar G__22435 = cljs.core.first(seq22433__$1);\nvar seq22433__$2 = cljs.core.next(seq22433__$1);\nvar G__22436 = cljs.core.first(seq22433__$2);\nvar seq22433__$3 = cljs.core.next(seq22433__$2);\nvar self__4851__auto__ = this;\nreturn self__4851__auto__.cljs$core$IFn$_invoke$arity$variadic(G__22434,G__22435,G__22436,seq22433__$3);\n}));\n\nre_frame.interceptor.invoke_interceptor_fn = (function re_frame$interceptor$invoke_interceptor_fn(context,interceptor,direction){\nvar temp__5751__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(interceptor,direction);\nif(cljs.core.truth_(temp__5751__auto__)){\nvar f = temp__5751__auto__;\nreturn (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(context) : f.call(null,context));\n} else {\nreturn context;\n}\n});\n/**\n * Loop over all interceptors, calling `direction` function on each,\n *   threading the value of `context` through every call.\n * \n *   `direction` is one of `:before` or `:after`.\n * \n *   Each iteration, the next interceptor to process is obtained from\n *   context's `:queue`. After they are processed, interceptors are popped\n *   from `:queue` and added to `:stack`.\n * \n *   After sufficient iteration, `:queue` will be empty, and `:stack` will\n *   contain all interceptors processed.\n * \n *   Returns updated `context`. Ie. the `context` which has been threaded\n *   through all interceptor functions.\n * \n *   Generally speaking, an interceptor's `:before` function will (if present)\n *   add to a `context's` `:coeffects`, while it's `:after` function\n *   will modify the `context`'s `:effects`.  Very approximately.\n * \n *   But because all interceptor functions are given `context`, and can\n *   return a modified version of it, the way is clear for an interceptor\n *   to introspect the stack or queue, or even modify the queue\n *   (add new interceptors via `enqueue`?). This is a very fluid arrangement.\n */\nre_frame.interceptor.invoke_interceptors = (function re_frame$interceptor$invoke_interceptors(context,direction){\nvar context__$1 = context;\nwhile(true){\nvar queue = new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879).cljs$core$IFn$_invoke$arity$1(context__$1);\nif(cljs.core.empty_QMARK_(queue)){\nreturn context__$1;\n} else {\nvar interceptor = cljs.core.peek(queue);\nvar stack = new cljs.core.Keyword(null,\"stack\",\"stack\",-793405930).cljs$core$IFn$_invoke$arity$1(context__$1);\nvar G__22452 = re_frame.interceptor.invoke_interceptor_fn(cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(context__$1,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879),cljs.core.pop(queue),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"stack\",\"stack\",-793405930),cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack,interceptor)], 0)),interceptor,direction);\ncontext__$1 = G__22452;\ncontinue;\n}\nbreak;\n}\n});\nre_frame.interceptor.enqueue = (function re_frame$interceptor$enqueue(context,interceptors){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(context,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879),cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.into,re_frame.interop.empty_queue),interceptors);\n});\n/**\n * Create a fresh context\n */\nre_frame.interceptor.context = (function re_frame$interceptor$context(var_args){\nvar G__22438 = arguments.length;\nswitch (G__22438) {\ncase 2:\nreturn re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2 = (function (event,interceptors){\nreturn re_frame.interceptor.enqueue(re_frame.interceptor.assoc_coeffect(re_frame.interceptor.assoc_coeffect(cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"event\",\"event\",301435442),event),new cljs.core.Keyword(null,\"original-event\",\"original-event\",2121330403),event),interceptors);\n}));\n\n(re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$3 = (function (event,interceptors,db){\nreturn re_frame.interceptor.assoc_coeffect(re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2(event,interceptors),new cljs.core.Keyword(null,\"db\",\"db\",993250759),db);\n}));\n\n(re_frame.interceptor.context.cljs$lang$maxFixedArity = 3);\n\n/**\n * Called on completion of `:before` processing, this function prepares/modifies\n * `context` for the backwards sweep of processing in which an interceptor\n * chain's `:after` fns are called.\n * \n *   At this point in processing, the `:queue` is empty and `:stack` holds all\n *   the previously run interceptors. So this function enables the backwards walk\n *   by priming `:queue` with what's currently in `:stack`\n */\nre_frame.interceptor.change_direction = (function re_frame$interceptor$change_direction(context){\nreturn re_frame.interceptor.enqueue(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879)),new cljs.core.Keyword(null,\"stack\",\"stack\",-793405930).cljs$core$IFn$_invoke$arity$1(context));\n});\n/**\n * Executes the given chain (coll) of interceptors.\n * \n * Each interceptor has this form:\n *     {:before  (fn [context] ...)     ;; returns possibly modified context\n *      :after   (fn [context] ...)}    ;; `identity` would be a noop\n * \n * Walks the queue of interceptors from beginning to end, calling the\n * `:before` fn on each, then reverse direction and walk backwards,\n * calling the `:after` fn on each.\n * \n * The last interceptor in the chain presumably wraps an event\n * handler fn. So the overall goal of the process is to \"handle\n * the given event\".\n * \n * Thread a `context` through all calls. `context` has this form:\n * \n *   {:coeffects {:event [:a-query-id :some-param]\n *                :db    <original contents of app-db>}\n *    :effects   {:db    <new value for app-db>\n *                :dispatch  [:an-event-id :param1]}\n *    :queue     <a collection of further interceptors>\n *    :stack     <a collection of interceptors already walked>}\n * \n * `context` has `:coeffects` and `:effects` which, if this was a web\n * server, would be somewhat analogous to `request` and `response`\n * respectively.\n * \n * `coeffects` will contain data like `event` and the initial\n * state of `db` -  the inputs required by the event handler\n * (sitting presumably on the end of the chain), while handler-returned\n * side effects are put into `:effects` including, but not limited to,\n * new values for `db`.\n * \n * The first few interceptors in a chain will likely have `:before`\n * functions which \"prime\" the `context` by adding the event, and\n * the current state of app-db into `:coeffects`. But interceptors can\n * add whatever they want to `:coeffects` - perhaps the event handler needs\n * some information from localstore, or a random number, or access to\n * a DataScript connection.\n * \n * Equally, some interceptors in the chain will have `:after` fn\n * which can process the side effects accumulated into `:effects`\n * including but, not limited to, updates to app-db.\n * \n * Through both stages (before and after), `context` contains a `:queue`\n * of interceptors yet to be processed, and a `:stack` of interceptors\n * already done.  In advanced cases, these values can be modified by the\n * functions through which the context is threaded.\n */\nre_frame.interceptor.execute = (function re_frame$interceptor$execute(event_v,interceptors){\nif(re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__22346__auto___22454 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"interceptors\",\"interceptors\",-1546782951),interceptors], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"interceptors\",\"interceptors\",-1546782951),interceptors], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__22346__auto___22454);\n\n} else {\n}\n\nreturn re_frame.interceptor.invoke_interceptors(re_frame.interceptor.change_direction(re_frame.interceptor.invoke_interceptors(re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2(event_v,interceptors),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388))),new cljs.core.Keyword(null,\"after\",\"after\",594996914));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","re_frame/interceptor.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",25],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$re-frame.interceptor","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$re-frame.loggers","^P","~$re-frame.interop","^Q","~$re-frame.trace","^R","~$trace","^R","~$clojure.set","^T","~$set","^T","~$cljs.core","^V","~$goog","^W"],"~:seen",["^H",["~:require"]],"~:uses",["^ ","~$console","^P","~$empty-queue","^Q","~$debug-enabled?","^Q"],"~:require-macros",["^ ","^R","^R","^S","^R","^V","^V"],"~:form",["~#list",["~$ns","^J",["^14",["^Y",["^P","~:refer",["^["]],["^Q","^16",["^10","^11"]],["^R","~:as","^S","~:include-macros",true],["^T","^17","^U"]]]]],"~:flags",["^ ","^Y",["^H",[]]],"~:js-deps",["^ "],"~:deps",["^W","^V","^P","^Q","^R","^T"]],"^M","^J","~:resource-id",["~:shadow.build.classpath/resource","re_frame/interceptor.cljc"],"~:compiled-at",1651414827735,"^K",["^ ","^P","^P","^Q","^Q","^R","^R","^S","^R","^T","^T","^U","^T","^V","^V","^W","^W"],"~:resource-name","re_frame/interceptor.cljc","~:warnings",[],"~:source","(ns re-frame.interceptor\n  (:require\n    [re-frame.loggers :refer [console]]\n    [re-frame.interop :refer [empty-queue debug-enabled?]]\n    [re-frame.trace :as trace :include-macros true]\n    [clojure.set :as set]))\n\n\n(def mandatory-interceptor-keys #{:id :after :before})\n\n(defn interceptor?\n  [m]\n  (and (map? m)\n       (= mandatory-interceptor-keys (-> m keys set))))\n\n\n(defn ->interceptor\n  [& {:as m :keys [id before after]}]\n  (when debug-enabled?\n    (if-let [unknown-keys (seq (set/difference\n                                (-> m keys set)\n                                mandatory-interceptor-keys))]\n      (console :error \"re-frame: ->interceptor\" m \"has unknown keys:\" unknown-keys)))\n  {:id     (or id :unnamed)\n   :before before\n   :after  after})\n\n;; -- Effect Helpers  -----------------------------------------------------------------------------\n\n(defn get-effect\n  ([context]\n   (:effects context))\n  ([context key]\n   (get-in context [:effects key]))\n  ([context key not-found]\n   (get-in context [:effects key] not-found)))\n\n(defn assoc-effect\n  [context key value]\n  (assoc-in context [:effects key] value))\n\n(defn update-effect\n  [context key f & args]\n  (apply update-in context [:effects key] f args))\n\n;; -- CoEffect Helpers  ---------------------------------------------------------------------------\n\n(defn get-coeffect\n  ([context]\n   (:coeffects context))\n  ([context key]\n   (get-in context [:coeffects key]))\n  ([context key not-found]\n   (get-in context [:coeffects key] not-found)))\n\n(defn assoc-coeffect\n  [context key value]\n  (assoc-in context [:coeffects key] value))\n\n(defn update-coeffect\n  [context key f & args]\n  (apply update-in context [:coeffects key] f args))\n\n;; -- Execute Interceptor Chain  ------------------------------------------------------------------\n\n\n(defn- invoke-interceptor-fn\n  [context interceptor direction]\n  (if-let [f (get interceptor direction)]\n    (f context)\n    context))\n\n\n(defn- invoke-interceptors\n  \"Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while it's `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement.\"\n  ([context direction]\n   (loop [context context]\n     (let [queue (:queue context)]        ;; future interceptors\n       (if (empty? queue)\n         context\n         (let [interceptor (peek queue)   ;; next interceptor to call\n               stack (:stack context)]    ;; already completed interceptors\n           (recur (-> context\n                      (assoc :queue (pop queue)\n                             :stack (conj stack interceptor))\n                      (invoke-interceptor-fn interceptor direction)))))))))\n\n\n(defn enqueue\n  [context interceptors]\n  (update context :queue\n          (fnil into empty-queue)\n          interceptors))\n\n\n(defn- context\n  \"Create a fresh context\"\n  ([event interceptors]\n   (-> {}\n      (assoc-coeffect :event event)\n      ;; Some interceptors, like `trim-v` and `unwrap`, alter event so capture\n      ;; the original for use cases such as tracing.\n      (assoc-coeffect :original-event event)\n      (enqueue interceptors)))\n  ([event interceptors db]      ;; only used in tests, probably a hack, remove ?  XXX\n   (-> (context event interceptors)\n       (assoc-coeffect :db db))))\n\n\n(defn- change-direction\n  \"Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`\"\n  [context]\n  (-> context\n      (dissoc :queue)\n      (enqueue (:stack context))))\n\n\n(defn execute\n  \"Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of interceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \\\"handle\n   the given event\\\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat analogous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \\\"prime\\\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded.\"\n  [event-v interceptors]\n  (trace/merge-trace!\n    {:tags {:interceptors interceptors}})\n  (-> (context event-v interceptors)\n      (invoke-interceptors :before)\n      change-direction\n      (invoke-interceptors :after)))\n","~:reader-features",["^H",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["re-frame.interceptor/mandatory-interceptor-keys","re-frame.interceptor/interceptor?","m","cljs.core/map?","cljs.core._EQ_","cljs.core/keys","cljs.core/set","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","re-frame.interceptor/->interceptor","p__22423","map__22424","cljs.core/--destructure-map","cljs.core.get","seq22422","self__4852__auto__","cljs.core/seq","id","before","after","re-frame.interop/debug-enabled?","temp__5751__auto__","unknown-keys","clojure.set.difference","re_frame.loggers.console","or__4253__auto__","G__22426","re-frame.interceptor/get-effect","js/Error","context","key","cljs.core.get_in","not-found","re-frame.interceptor/assoc-effect","value","cljs.core/assoc-in","re-frame.interceptor/update-effect","seq22427","G__22428","cljs.core/first","cljs.core/next","G__22429","G__22430","self__4851__auto__","f","args","cljs.core.apply","cljs.core/update-in","G__22432","re-frame.interceptor/get-coeffect","re-frame.interceptor/assoc-coeffect","re-frame.interceptor/update-coeffect","seq22433","G__22434","G__22435","G__22436","re-frame.interceptor/invoke-interceptor-fn","interceptor","direction","re-frame.interceptor/invoke-interceptors","queue","cljs.core/empty?","cljs.core/peek","stack","cljs.core.assoc","cljs.core/pop","cljs.core.conj","re-frame.interceptor/enqueue","interceptors","cljs.core.update","cljs.core.fnil","cljs.core/into","re-frame.interop/empty-queue","G__22438","re-frame.interceptor/context","event","db","re_frame.interceptor.context","re-frame.interceptor/change-direction","cljs.core.dissoc","re-frame.interceptor/execute","event-v","re-frame.trace/is-trace-enabled?","new-trace__22346__auto__","cljs.core.merge","re-frame.trace/*current-trace*","cljs.core/merge"]],"~:used-vars",["^H",["~$cljs.core/--destructure-map","~$re-frame.interceptor/context","~$re-frame.interceptor/get-effect","~$cljs.core/=","~$cljs.core/keys","~$re-frame.interceptor/execute","~$cljs.core/IndexedSeq","~$re-frame.interceptor/->interceptor","~$cljs.core/seq","~$cljs.core/apply","~$re-frame.loggers/console","~$cljs.core/dissoc","~$re-frame.interceptor/update-effect","~$cljs.core/pop","~$re-frame.interceptor/invoke-interceptors","~$cljs.core/set","~$cljs.core/empty?","~$re-frame.interceptor/enqueue","~$cljs.core/fnil","~$cljs.core/into","~$cljs.core/map?","~$cljs.core/conj","~$cljs.core/update","~$cljs.core/peek","~$cljs.core/get-in","~$re-frame.interceptor/update-coeffect","~$re-frame.trace/is-trace-enabled?","~$cljs.core/get","~$re-frame.interceptor/assoc-coeffect","~$clojure.set/difference","~$re-frame.interceptor/change-direction","~$re-frame.trace/*current-trace*","~$cljs.core/next","~$re-frame.interceptor/get-coeffect","~$re-frame.interop/empty-queue","~$re-frame.interceptor/assoc-effect","~$re-frame.interceptor/interceptor?","~$cljs.core/assoc","~$cljs.core/assoc-in","~$cljs.core/first","~$re-frame.interop/debug-enabled?","~$cljs.core/merge","~$cljs.core/update-in","~$re-frame.interceptor/invoke-interceptor-fn","~$js/Error","~$re-frame.interceptor/mandatory-interceptor-keys"]]],"~:cache-keys",["~#cmap",[["~:shadow.build.npm/resource","node_modules/react-dom/index.js"],["8bb0911dc09f89ce920abf1f1dfe18bfb7491740","384258095da6e9258793235bf5e297a992d36fca","dc3011a0ee823c91a565237d17cbc3c0856de8a6","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^H",[]],"~:deps-syms",["~$shadow.js","~$module$node_modules$react_dom$cjs$react_dom_production_min","~$module$node_modules$react_dom$cjs$react_dom_development"]]],["^1=","reagent/impl/batching.cljs"],["78c9f88e2cab334b7ea465641d1db7d4829b676d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","^V","~$reagent.debug","~$reagent.impl.util"]]],["^1=","goog/dom/tagname.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","~$goog.dom.HtmlElement"]]],["^1=","goog/labs/useragent/platform.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","~$goog.string.internal","~$goog.labs.userAgent.util"]]],["^1=","goog/math/math.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","~$goog.asserts"]]],["^1=","goog/html/trustedtypes.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W"]]],["^1=","goog/events/eventtype.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","~$goog.events.BrowserFeature","~$goog.userAgent"]]],["^1=","goog/labs/useragent/browser.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","~$goog.array","~$goog.object","^2Y","^2X"]]],["^1=","goog/html/safeurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","^2Z","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^2X"]]],["^1=","re_frame/loggers.cljc"],["6bdd905f56b7d7836ae9d5b772dc693f33550f10","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","^V","^T"]]],["^1=","goog/array/array.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","^2Z"]]],["^2M","node_modules/prop-types/checkPropTypes.js"],["8bb0911dc09f89ce920abf1f1dfe18bfb7491740","384258095da6e9258793235bf5e297a992d36fca","bc33c949bf3e8df11ab0bf5db55467128445adbc","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^2R","~$module$node_modules$prop_types$lib$ReactPropTypesSecret","~$module$node_modules$prop_types$lib$has"]]],["^1=","reagent/impl/util.cljs"],["78c9f88e2cab334b7ea465641d1db7d4829b676d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","^V","^2U","~$clojure.string"]]],["^1=","goog/useragent/useragent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^2Y","~$goog.reflect","^2X"]]],["^1=","goog/events/eventlike.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","~$goog.events.Event","~$goog.events.EventId"]]],["^1=","goog/debug/error.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W"]]],["^1=","goog/events/events.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","^2Z","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","^2[","~$goog.events.Listenable","~$goog.events.ListenerMap","~$goog.debug.ErrorHandler","^3A","~$goog.events.EventLike","~$goog.events.EventWrapper","~$goog.events.ListenableKey","~$goog.events.Listener"]]],["^1=","goog/events/browserfeature.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W"]]],["^1=","goog/dom/nodetype.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W"]]],["^2M","node_modules/scheduler/cjs/scheduler.development.js"],["8bb0911dc09f89ce920abf1f1dfe18bfb7491740","384258095da6e9258793235bf5e297a992d36fca","f3053a44b61bb3278782ca56c8dcc410f1944dc1","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^2R"]]],["^1=","reagent/ratom.cljs"],["78c9f88e2cab334b7ea465641d1db7d4829b676d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","^V","^2V","^2U","~$reagent.impl.batching","^T","^32"]]],["^2M","node_modules/scheduler/cjs/scheduler.production.min.js"],["8bb0911dc09f89ce920abf1f1dfe18bfb7491740","384258095da6e9258793235bf5e297a992d36fca","4a53b69f29acae19788e3e2f50c92f8d588f5c78","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^2R"]]],["^1=","re_frame/interop.cljs"],["6bdd905f56b7d7836ae9d5b772dc693f33550f10","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","^V","~$goog.async.nextTick","~$goog.events","~$reagent.core","~$reagent.ratom"]]],["^1=","goog/events/eventtarget.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","~$goog.Disposable","^2Z","^3M","^3@","^3D","^3E","^32","^3A","^3G","^3I"]]],["^1=","goog/disposable/disposable.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","~$goog.disposable.IDisposable","~$goog.dispose","~$goog.disposeAll"]]],["^1=","goog/string/typedstring.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W"]]],["^2M","node_modules/scheduler/cjs/scheduler-tracing.production.min.js"],["8bb0911dc09f89ce920abf1f1dfe18bfb7491740","384258095da6e9258793235bf5e297a992d36fca","12c2587c156a560ed636c6e3cd1c0a7dc69d31e0","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^2R"]]],["^2M","node_modules/react/index.js"],["8bb0911dc09f89ce920abf1f1dfe18bfb7491740","384258095da6e9258793235bf5e297a992d36fca","a69a7f3d4a4636bf9035bc53c05b2d99a7b8af7f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^2R","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1=","shadow/js.js"],["71e8fda559c83dadfc810712336ef7cd6bbf30cb","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W"]]],["^1=","goog/object/object.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W"]]],["^1=","reagent/impl/template.cljs"],["78c9f88e2cab334b7ea465641d1db7d4829b676d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","^V","^C","^3;","~$clojure.walk","^2V","~$reagent.impl.component","^3K","^3O","^2U","^32"]]],["^1=","goog/dom/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","^2Z"]]],["^2M","node_modules/react-dom/cjs/react-dom.production.min.js"],["8bb0911dc09f89ce920abf1f1dfe18bfb7491740","384258095da6e9258793235bf5e297a992d36fca","db8259775ecd7012ed94e61ee3adc97de9522104","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^2R","^C","~$module$node_modules$object_assign$index","~$module$node_modules$scheduler$index"]]],"~:SHADOW-TIMESTAMP",[1651414510000,1651414510000,1651414474000],["^2M","node_modules/react/cjs/react.development.js"],["8bb0911dc09f89ce920abf1f1dfe18bfb7491740","384258095da6e9258793235bf5e297a992d36fca","87a015cdc96b5a16d98a3d5c344d21accc58dadd","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^2R","^3X","~$module$node_modules$prop_types$checkPropTypes"]]],["^1=","goog/math/long.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","^2Z","^3?"]]],["^1=","goog/events/listener.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","^3I","^3D"]]],["^1=","goog/html/trustedresourceurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","^2Z","~$goog.fs.blob","^33","~$goog.html.SafeScript","~$goog.html.trustedtypes","^35","^36","^37","^38"]]],["^1=","goog/events/listenermap.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","^31","^3J","^32","^3A","^3D","^3I"]]],["^1=","goog/events/eventid.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W"]]],["^1=","goog/string/internal.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W"]]],["^1=","goog/events/eventwrapper.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","~$goog.events.EventHandler","~$goog.events.ListenableType"]]],["^2M","node_modules/scheduler/cjs/scheduler-tracing.development.js"],["8bb0911dc09f89ce920abf1f1dfe18bfb7491740","384258095da6e9258793235bf5e297a992d36fca","9028fd288ab5a39d86fa3b5f3e9b09bad420d4f6","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^2R"]]],["^1=","goog/functions/functions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W"]]],["^1=","goog/html/safestyle.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","^37","~$goog.html.SafeUrl","^38","^2Z","^2X"]]],["^1=","goog/dom/safe.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","^2Z","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^41","~$goog.html.SafeStyle","^45","^34","~$goog.html.uncheckedconversions","^37","^2X"]]],["^1=","reagent/impl/component.cljs"],["78c9f88e2cab334b7ea465641d1db7d4829b676d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","^V","^32","^C","^2V","^3K","^3O","^2U"]]],["^1=","clojure/walk.cljs"],["7d51bc68e9eca42c3e2866d92e59ef7939005fc7","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","^V"]]],["^1=","goog/html/safehtml.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","^37","^35","^36","^41","^49","~$goog.html.SafeStyleSheet","^45","~$goog.dom.TagName","^34","^38","^2Z","^3<","^31","^32","^2X","~$goog.dom.tags","^42"]]],["^1=","goog/dom/tags.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","^32"]]],["^1=","goog/math/size.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W"]]],["^2M","node_modules/scheduler/index.js"],["8bb0911dc09f89ce920abf1f1dfe18bfb7491740","384258095da6e9258793235bf5e297a992d36fca","408126fc2241739168bcaf5965ae56a7df143144","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^2R","~$module$node_modules$scheduler$cjs$scheduler_production_min","~$module$node_modules$scheduler$cjs$scheduler_development"]]],["^1=","goog/labs/useragent/engine.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","^31","^2X","^2Y"]]],["^1=","goog/fs/blob.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W"]]],["^1=","goog/dom/dom.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","^31","^2Z","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^4<","~$goog.dom.safe","^48","^4:","~$goog.math.Coordinate","~$goog.math.Size","^32","~$goog.string","^37","~$goog.string.Unicode","^30"]]],["^1=","goog/asserts/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","~$goog.debug.Error","^4A"]]],["^1=","goog/uri/uri.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","^31","^2Z","~$goog.collections.maps","^4E","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1=","goog/collections/maps.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W"]]],["^1=","goog/i18n/bidi.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W"]]],["^2M","node_modules/object-assign/index.js"],["8bb0911dc09f89ce920abf1f1dfe18bfb7491740","384258095da6e9258793235bf5e297a992d36fca","519ffd5a4c91b67302cc9947b794966d629860cd","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^2R"]]],["^1=","goog/debug/errorhandler.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","^3P","^2Z","~$goog.debug.EntryPointMonitor","^4G"]]],["^1=","goog/disposable/idisposable.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W"]]],["^1=","goog/fs/url.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W"]]],["^1=","goog/base.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",[]]],["^2M","node_modules/prop-types/lib/has.js"],["8bb0911dc09f89ce920abf1f1dfe18bfb7491740","384258095da6e9258793235bf5e297a992d36fca","9f779c2d805f87f29657698374d8b9bd92618d1b","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^2R"]]],["^1=","goog/structs/structs.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","^31","^32"]]],["^1=","goog/disposable/dispose.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W"]]],["^1=","clojure/string.cljs"],["7d51bc68e9eca42c3e2866d92e59ef7939005fc7","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","^V","^4E","~$goog.string.StringBuffer"]]],["^2M","node_modules/react/cjs/react.production.min.js"],["8bb0911dc09f89ce920abf1f1dfe18bfb7491740","384258095da6e9258793235bf5e297a992d36fca","7e2672a2ef583715727d174c8812a70391258842","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^2R","^3X"]]],["^1=","goog/debug/entrypointregistry.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","^2Z"]]],["^1=","goog/string/string.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","^4B","^4:","^37","^2X"]]],["^1=","re_frame/interceptor.cljc"],["6bdd905f56b7d7836ae9d5b772dc693f33550f10","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","^V","^P","^Q","^R","^T"]]],["^1=","goog/reflect/reflect.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W"]]],["^1=","goog/labs/useragent/util.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","~$goog.labs.userAgent","^2X"]]],["^1=","reagent/core.cljs"],["78c9f88e2cab334b7ea465641d1db7d4829b676d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","^V","^C","~$reagent.impl.template","^3W","^2V","^3K","^3O","^2U","~$reagent.dom"]]],["^1=","goog/debug/debug.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","^31","~$goog.debug.errorcontext"]]],["^1=","goog/string/stringbuffer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W"]]],["^1=","goog/math/coordinate.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","~$goog.math"]]],["^1=","goog/debug/errorcontext.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W"]]],["^1=","goog/labs/useragent/useragent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W"]]],["^1=","goog/async/nexttick.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","^3B","~$goog.dom","^4<","^47","^3<","^3="]]],["^1=","goog/html/uncheckedconversions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","^2Z","^48","^41","^49","^4;","^45","^34","^37","^2X","^35"]]],["^1=","reagent/dom.cljs"],["78c9f88e2cab334b7ea465641d1db7d4829b676d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","^V","^E","^2V","^4P","^3K","^3O","^2U"]]],["^2M","node_modules/prop-types/lib/ReactPropTypesSecret.js"],["8bb0911dc09f89ce920abf1f1dfe18bfb7491740","384258095da6e9258793235bf5e297a992d36fca","4eec230c5b56ef580ea9c3e7ae6358ba1f8bdbec","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^2R"]]],["^1=","goog/events/event.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","^3P","^3A"]]],["^1=","goog/events/eventhandler.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","^3P","^3M","^32","^3@","^3A","~$goog.events.EventTarget","^3H"]]],["^1=","goog/dom/htmlelement.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W"]]],["^1=","cljs/core.cljs"],["7d51bc68e9eca42c3e2866d92e59ef7939005fc7","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","~$goog.math.Long","~$goog.math.Integer","^4E","^32","^31","~$goog.Uri","^4N"]]],["^1=","goog/html/safescript.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","^37","^38","^42","^2Z"]]],["^1=","reagent/debug.cljs"],["78c9f88e2cab334b7ea465641d1db7d4829b676d","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","^V"]]],["^1=","goog/html/safestylesheet.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","^37","^49","^38","^32","^2Z","^2X"]]],["^1=","goog/events/browserevent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","~$goog.debug","^3@","~$goog.events.EventType","^3?","^30"]]],["^1=","goog/math/integer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","^3?"]]],["^1=","goog/dom/browserfeature.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","^30"]]],["^2M","node_modules/scheduler/tracing.js"],["8bb0911dc09f89ce920abf1f1dfe18bfb7491740","384258095da6e9258793235bf5e297a992d36fca","4a7a89de5eaa5548bfc85da9e5243b3c7e444a34","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^2R","~$module$node_modules$scheduler$cjs$scheduler_tracing_production_min","~$module$node_modules$scheduler$cjs$scheduler_tracing_development"]]],["^2M","node_modules/react-dom/cjs/react-dom.development.js"],["8bb0911dc09f89ce920abf1f1dfe18bfb7491740","384258095da6e9258793235bf5e297a992d36fca","75942e2c51d78023c06fc0e51bb6fca0fea291b1","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^2R","^C","^3X","^3[","^3Y","~$module$node_modules$scheduler$tracing"]]],["^1=","clojure/set.cljs"],["7d51bc68e9eca42c3e2866d92e59ef7939005fc7","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","^V"]]],["^1=","goog/uri/utils.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","^2Z","^4E"]]],["^1=","goog/string/const.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","^2Z","^38"]]],["^1=","goog/disposable/disposeall.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","^3R"]]],["^1=","goog/events/listenable.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","^3A","^3G","^3I"]]],["^1=","goog/events/listenablekey.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","^3D"]]],["^1=","re_frame/trace.cljc"],["6bdd905f56b7d7836ae9d5b772dc693f33550f10","^2N",["^ ","^2O",null,"^2P",["^H",[]],"^2Q",["^W","^V","^Q","^P","^47"]]]]],"~:clj-info",["^ ","jar:file:/home/muakda/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/env.cljc",1651414474000,"jar:file:/home/muakda/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/externs.clj",1651414474000,"jar:file:/home/muakda/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/default_data_readers.clj",1651414471000,"jar:file:/home/muakda/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1651336337000,"jar:file:/home/muakda/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1651336337000,"jar:file:/home/muakda/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/analyzer.cljc",1651414474000,"jar:file:/home/muakda/.m2/repository/re-frame/re-frame/1.1.2/re-frame-1.1.2.jar!/re_frame/interop.clj",1651414510000,"jar:file:/home/muakda/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/errors.clj",1651414471000,"jar:file:/home/muakda/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/util.cljc",1651414474000,"jar:file:/home/muakda/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1651336337000,"jar:file:/home/muakda/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/js_deps.cljc",1651414474000,"jar:file:/home/muakda/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/compiler.cljc",1651414474000,"jar:file:/home/muakda/.m2/repository/reagent/reagent/0.9.1/reagent-0.9.1.jar!/reagent/ratom.clj",1651414509000,"jar:file:/home/muakda/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1651336337000,"jar:file:/home/muakda/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/source_map.clj",1651414474000,"jar:file:/home/muakda/.m2/repository/net/cgrand/macrovich/0.2.1/macrovich-0.2.1.jar!/net/cgrand/macrovich.cljc",1651414510000,"jar:file:/home/muakda/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/source_map/base64_vlq.clj",1651414474000,"jar:file:/home/muakda/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/analyzer/passes.cljc",1651414474000,"jar:file:/home/muakda/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/analyzer/impl.cljc",1651414474000,"jar:file:/home/muakda/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/source_map/base64.clj",1651414474000,"jar:file:/home/muakda/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1651336337000,"jar:file:/home/muakda/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1651336337000,"jar:file:/home/muakda/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/core.cljc",1651414474000,"jar:file:/home/muakda/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/reader_types.clj",1651414471000,"jar:file:/home/muakda/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/tagged_literals.cljc",1651414474000,"jar:file:/home/muakda/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/instant.clj",1651414474000,"jar:file:/home/muakda/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1651336337000,"jar:file:/home/muakda/.m2/repository/reagent/reagent/0.9.1/reagent-0.9.1.jar!/reagent/debug.clj",1651414509000,"jar:file:/home/muakda/.m2/repository/org/clojure/data.json/2.4.0/data.json-2.4.0.jar!/clojure/data/json.clj",1651414470000,"jar:file:/home/muakda/.m2/repository/re-frame/re-frame/1.1.2/re-frame-1.1.2.jar!/re_frame/trace.cljc",1651414510000,"jar:file:/home/muakda/.m2/repository/reagent/reagent/0.9.1/reagent-0.9.1.jar!/reagent/core.clj",1651414509000,"jar:file:/home/muakda/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/inspect.clj",1651414471000,"jar:file:/home/muakda/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/analyzer/passes/and_or.cljc",1651414474000,"jar:file:/home/muakda/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader.clj",1651414471000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","re_frame/interceptor.cljc","^7",1,"^8",5,"^9",1,"^:",25],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E"],"^F",null,"^G",["^H",[]],"^I","^J","^K",["^ "],"^N",null,"^O",["^ ","^P","^P","^Q","^Q","^R","^R","^S","^R","^T","^T","^U","^T","^V","^V","^W","^W"],"^X",["^H",["^Y"]],"~:shadow/js-access-global",["^H",["Error"]],"^Z",["^ ","^[","^P","^10","^Q","^11","^Q"],"~:defs",["^ ","~$update-effect",["^ ","~:protocol-inline",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",42,"^8",7,"^9",42,"^:",20,"~:arglists",["^14",["~$quote",["^14",[["~$context","~$key","~$f","~$&","~$args"]]]]],"~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",3,"~:max-fixed-arity",3,"~:method-params",[["^14",["^60","^61","~$f","^62"]]],"^5Z",["^14",[["^60","^61","~$f","~$&","^62"]]],"~:arglists-meta",["^14",[null]]]],"^I","^1U","^6","re_frame/interceptor.cljc","^:",20,"^63",["^ ","^64",true,"^65",3,"^66",3,"^67",[["^14",["^60","^61","~$f","^62"]]],"^5Z",["^14",[["^60","^61","~$f","~$&","^62"]]],"^68",["^14",[null]]],"^67",[["^14",["^60","^61","~$f","^62"]]],"~:protocol-impl",null,"^65",3,"^68",["^14",[null]],"^8",1,"^64",true,"~:methods",[["^ ","^65",3,"^64",true,"~:tag","~$any"]],"^7",42,"~:ret-tag","^6<","^9",42,"^66",3,"~:fn-var",true,"^5Z",["^14",[["^60","^61","~$f","~$&","^62"]]]],"~$invoke-interceptors",["^ ","^5Y",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",74,"^8",8,"^9",74,"^:",27,"~:private",true,"^5Z",["^14",["^5[",["^14",[["^60","~$direction"]]]]],"~:doc","Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while it's `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement."],"^6@",true,"^I","^1W","^6","re_frame/interceptor.cljc","^:",27,"^67",["^14",[["^60","^6A"]]],"^69",null,"^68",["^14",[null,null]],"^8",1,"^64",false,"^7",74,"^9",74,"^66",2,"^6>",true,"^5Z",["^14",["^5[",["^14",[["^60","^6A"]]]]],"^6B","Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while it's `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement."],"~$assoc-coeffect",["^ ","^5Y",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",56,"^8",7,"^9",56,"^:",21,"^5Z",["^14",["^5[",["^14",[["^60","^61","~$value"]]]]]],"^I","^29","^6","re_frame/interceptor.cljc","^:",21,"^67",["^14",[["^60","^61","^6D"]]],"^69",null,"^68",["^14",[null,null]],"^8",1,"^64",false,"^7",56,"^6=",["^H",["~$clj","^6<"]],"^9",56,"^66",3,"^6>",true,"^5Z",["^14",["^5[",["^14",[["^60","^61","^6D"]]]]]],"~$update-coeffect",["^ ","^5Y",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",60,"^8",7,"^9",60,"^:",22,"^5Z",["^14",["^5[",["^14",[["^60","^61","~$f","~$&","^62"]]]]],"^63",["^ ","^64",true,"^65",3,"^66",3,"^67",[["^14",["^60","^61","~$f","^62"]]],"^5Z",["^14",[["^60","^61","~$f","~$&","^62"]]],"^68",["^14",[null]]]],"^I","^26","^6","re_frame/interceptor.cljc","^:",22,"^63",["^ ","^64",true,"^65",3,"^66",3,"^67",[["^14",["^60","^61","~$f","^62"]]],"^5Z",["^14",[["^60","^61","~$f","~$&","^62"]]],"^68",["^14",[null]]],"^67",[["^14",["^60","^61","~$f","^62"]]],"^69",null,"^65",3,"^68",["^14",[null]],"^8",1,"^64",true,"^6:",[["^ ","^65",3,"^64",true,"^6;","^6<"]],"^7",60,"^6=","^6<","^9",60,"^66",3,"^6>",true,"^5Z",["^14",[["^60","^61","~$f","~$&","^62"]]]],"~$invoke-interceptor-fn",["^ ","^5Y",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",67,"^8",8,"^9",67,"^:",29,"^6@",true,"^5Z",["^14",["^5[",["^14",[["^60","~$interceptor","^6A"]]]]]],"^6@",true,"^I","^2H","^6","re_frame/interceptor.cljc","^:",29,"^67",["^14",[["^60","^6H","^6A"]]],"^69",null,"^68",["^14",[null,null]],"^8",1,"^64",false,"^7",67,"^6=",["^H",[null,"^6<"]],"^9",67,"^66",3,"^6>",true,"^5Z",["^14",["^5[",["^14",[["^60","^6H","^6A"]]]]]],"~$get-effect",["^ ","^5Y",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",30,"^8",7,"^9",30,"^:",17,"^5Z",["^14",["^5[",["^14",[["^60"],["^60","^61"],["^60","^61","~$not-found"]]]]],"^63",["^ ","^64",false,"^65",3,"^66",3,"^67",[["^60"],["^60","^61"],["^60","^61","^6J"]],"^5Z",["^14",[["^60"],["^60","^61"],["^60","^61","^6J"]]],"^68",["^14",[null,null,null]]]],"^I","^1K","^6","re_frame/interceptor.cljc","^:",17,"^63",["^ ","^64",false,"^65",3,"^66",3,"^67",[["^60"],["^60","^61"],["^60","^61","^6J"]],"^5Z",["^14",[["^60"],["^60","^61"],["^60","^61","^6J"]]],"^68",["^14",[null,null,null]]],"^67",[["^60"],["^60","^61"],["^60","^61","^6J"]],"^69",null,"^65",3,"^68",["^14",[null,null,null]],"^8",1,"^64",false,"^6:",[["^ ","^65",1,"^64",false,"^6;","^6<"],["^ ","^65",2,"^64",false,"^6;",["^H",[null,"^6<"]]],["^ ","^65",3,"^64",false,"^6;",["^H",[null,"^6<"]]]],"^7",30,"^9",30,"^66",3,"^6>",true,"^5Z",["^14",[["^60"],["^60","^61"],["^60","^61","^6J"]]]],"~$->interceptor",["^ ","^5Y",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",17,"^8",7,"^9",17,"^:",20,"^5Z",["^14",["^5[",["^14",[["~$&",["^ ","^17","~$m","~:keys",["~$id","~$before","~$after"]]]]]]],"^63",["^ ","^64",true,"^65",0,"^66",0,"^67",[["^14",[["^ ","^17","~$m","^6L",["^6M","^6N","^6O"]]]]],"^5Z",["^14",[["~$&",["^ ","^17","~$m","^6L",["^6M","^6N","^6O"]]]]],"^68",["^14",[null]]]],"^I","^1P","^6","re_frame/interceptor.cljc","^:",20,"^63",["^ ","^64",true,"^65",0,"^66",0,"^67",[["^14",[["^ ","^17","~$m","^6L",["^6M","^6N","^6O"]]]]],"^5Z",["^14",[["~$&",["^ ","^17","~$m","^6L",["^6M","^6N","^6O"]]]]],"^68",["^14",[null]]],"^67",[["^14",[["^ ","^17","~$m","^6L",["^6M","^6N","^6O"]]]]],"^69",null,"^65",0,"^68",["^14",[null]],"^8",1,"^64",true,"^6:",[["^ ","^65",0,"^64",true,"^6;","~$cljs.core/IMap"]],"^7",17,"^6=","^6<","^9",17,"^66",0,"^6>",true,"^5Z",["^14",[["~$&",["^ ","^17","~$m","^6L",["^6M","^6N","^6O"]]]]]],"~$get-coeffect",["^ ","^5Y",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",48,"^8",7,"^9",48,"^:",19,"^5Z",["^14",["^5[",["^14",[["^60"],["^60","^61"],["^60","^61","^6J"]]]]],"^63",["^ ","^64",false,"^65",3,"^66",3,"^67",[["^60"],["^60","^61"],["^60","^61","^6J"]],"^5Z",["^14",[["^60"],["^60","^61"],["^60","^61","^6J"]]],"^68",["^14",[null,null,null]]]],"^I","^2>","^6","re_frame/interceptor.cljc","^:",19,"^63",["^ ","^64",false,"^65",3,"^66",3,"^67",[["^60"],["^60","^61"],["^60","^61","^6J"]],"^5Z",["^14",[["^60"],["^60","^61"],["^60","^61","^6J"]]],"^68",["^14",[null,null,null]]],"^67",[["^60"],["^60","^61"],["^60","^61","^6J"]],"^69",null,"^65",3,"^68",["^14",[null,null,null]],"^8",1,"^64",false,"^6:",[["^ ","^65",1,"^64",false,"^6;","^6<"],["^ ","^65",2,"^64",false,"^6;",["^H",[null,"^6<"]]],["^ ","^65",3,"^64",false,"^6;",["^H",[null,"^6<"]]]],"^7",48,"^9",48,"^66",3,"^6>",true,"^5Z",["^14",[["^60"],["^60","^61"],["^60","^61","^6J"]]]],"~$execute",["^ ","^5Y",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",146,"^8",7,"^9",146,"^:",14,"^5Z",["^14",["^5[",["^14",[["~$event-v","~$interceptors"]]]]],"^6B","Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of interceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \"handle\n   the given event\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat analogous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \"prime\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded."],"^I","^1N","^6","re_frame/interceptor.cljc","^:",14,"^67",["^14",[["^6S","^6T"]]],"^69",null,"^68",["^14",[null,null]],"^8",1,"^64",false,"^7",146,"^6=","^6<","^9",146,"^66",2,"^6>",true,"^5Z",["^14",["^5[",["^14",[["^6S","^6T"]]]]],"^6B","Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of interceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \"handle\n   the given event\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat analogous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \"prime\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded."],"~$assoc-effect",["^ ","^5Y",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",38,"^8",7,"^9",38,"^:",19,"^5Z",["^14",["^5[",["^14",[["^60","^61","^6D"]]]]]],"^I","^2@","^6","re_frame/interceptor.cljc","^:",19,"^67",["^14",[["^60","^61","^6D"]]],"^69",null,"^68",["^14",[null,null]],"^8",1,"^64",false,"^7",38,"^6=",["^H",["^6E","^6<"]],"^9",38,"^66",3,"^6>",true,"^5Z",["^14",["^5[",["^14",[["^60","^61","^6D"]]]]]],"~$enqueue",["^ ","^5Y",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",111,"^8",7,"^9",111,"^:",14,"^5Z",["^14",["^5[",["^14",[["^60","^6T"]]]]]],"^I","^1Z","^6","re_frame/interceptor.cljc","^:",14,"^67",["^14",[["^60","^6T"]]],"^69",null,"^68",["^14",[null,null]],"^8",1,"^64",false,"^7",111,"^6=",["^H",["^6E","^6<"]],"^9",111,"^66",2,"^6>",true,"^5Z",["^14",["^5[",["^14",[["^60","^6T"]]]]]],"~$mandatory-interceptor-keys",["^ ","^I","^2J","^6","re_frame/interceptor.cljc","^7",9,"^8",1,"^9",9,"^:",32,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",9,"^8",6,"^9",9,"^:",32],"^6;","~$cljs.core/ISet"],"~$interceptor?",["^ ","^5Y",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",11,"^8",7,"^9",11,"^:",19,"^5Z",["^14",["^5[",["^14",[["~$m"]]]]]],"^I","^2A","^6","re_frame/interceptor.cljc","^:",19,"^67",["^14",[["~$m"]]],"^69",null,"^68",["^14",[null,null]],"^8",1,"^64",false,"^7",11,"^6=","~$boolean","^9",11,"^66",1,"^6>",true,"^5Z",["^14",["^5[",["^14",[["~$m"]]]]]],"~$change-direction",["^ ","^5Y",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",132,"^8",8,"^9",132,"^:",24,"^6@",true,"^5Z",["^14",["^5[",["^14",[["^60"]]]]],"^6B","Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`"],"^6@",true,"^I","^2;","^6","re_frame/interceptor.cljc","^:",24,"^67",["^14",[["^60"]]],"^69",null,"^68",["^14",[null,null]],"^8",1,"^64",false,"^7",132,"^6=",["^H",["^6E","^6<"]],"^9",132,"^66",1,"^6>",true,"^5Z",["^14",["^5[",["^14",[["^60"]]]]],"^6B","Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`"],"^60",["^ ","^5Y",null,"^5",["^ ","^6@",true,"^6","re_frame/interceptor.cljc","^:",15,"^63",["^ ","^64",false,"^65",3,"^66",3,"^67",[["~$event","^6T"],["^70","^6T","~$db"]],"^5Z",["^14",[["^70","^6T"],["^70","^6T","^71"]]],"^68",["^14",[null,null]]],"^8",8,"^7",118,"^9",118,"^5Z",["^14",["^5[",["^14",[["^70","^6T"],["^70","^6T","^71"]]]]],"^6B","Create a fresh context"],"^6@",true,"^I","^1J","^6","re_frame/interceptor.cljc","^:",15,"^63",["^ ","^64",false,"^65",3,"^66",3,"^67",[["^70","^6T"],["^70","^6T","^71"]],"^5Z",["^14",[["^70","^6T"],["^70","^6T","^71"]]],"^68",["^14",[null,null]]],"^67",[["^70","^6T"],["^70","^6T","^71"]],"^69",null,"^65",3,"^68",["^14",[null,null]],"^8",1,"^64",false,"^6:",[["^ ","^65",2,"^64",false,"^6;",["^H",["^6E","^6<"]]],["^ ","^65",3,"^64",false,"^6;",["^H",["^6E","^6<"]]]],"^7",118,"^9",118,"^66",3,"^6>",true,"^5Z",["^14",[["^70","^6T"],["^70","^6T","^71"]]],"^6B","Create a fresh context"]],"^12",["^ ","^R","^R","^S","^R","^V","^V"],"~:cljs.analyzer/constants",["^ ","^X",["^H",["~:unnamed","~:tags","~:original-event","~:db","~:queue","~:event","~:after","~:id","~:effects","~:stack","~:error","~:coeffects","~:interceptors","~:before"]],"~:order",["^79","^7:","^7@","^7=","^73","^7;","^7>","^77","^7<","^78","^75","^76","^74","^7?"]],"^19",["^ ","^Y",["^H",[]]],"^1:",["^ "],"^1;",["^W","^V","^P","^Q","^R","^T"]],"^M","^J","~:ns-specs",["^ "],"~:ns-spec-vars",["^H",[]],"~:compiler-options",["^2L",[["^7D","~:static-fns"],true,["^7D","~:shadow-tweaks"],null,["^7D","~:source-map-inline"],null,["^7D","~:elide-asserts"],false,["^7D","~:optimize-constants"],null,["^7D","^1@"],null,["^7D","~:external-config"],null,["^7D","~:tooling-config"],null,["^7D","~:emit-constants"],null,["^7D","~:load-tests"],null,["^7D","~:form-size-threshold"],null,["^7D","~:global-goog-object&array"],null,["^7D","~:data-readers"],null,["^7D","~:infer-externs"],"~:auto",["^7D","^1B"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^7D","~:fn-invoke-direct"],null,["^7D","~:source-map"],"/dev/null"]]]