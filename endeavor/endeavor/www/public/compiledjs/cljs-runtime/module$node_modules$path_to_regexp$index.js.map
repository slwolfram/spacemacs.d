{
"version":3,
"file":"module$node_modules$path_to_regexp$index.js",
"lineCount":10,
"mappings":"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",
"sources":["node_modules/path-to-regexp/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$path_to_regexp$index\"] = function(global,require,module,exports) {\nvar isarray = require('isarray')\n\n/**\n * Expose `pathToRegexp`.\n */\nmodule.exports = pathToRegexp\nmodule.exports.parse = parse\nmodule.exports.compile = compile\nmodule.exports.tokensToFunction = tokensToFunction\nmodule.exports.tokensToRegExp = tokensToRegExp\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\", undefined]\n  // \"/route(\\\\d+)\"  => [undefined, undefined, undefined, \"\\d+\", undefined, undefined]\n  // \"/*\"            => [\"/\", undefined, undefined, undefined, undefined, \"*\"]\n  '([\\\\/.])?(?:(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?|(\\\\*))'\n].join('|'), 'g')\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse (str, options) {\n  var tokens = []\n  var key = 0\n  var index = 0\n  var path = ''\n  var defaultDelimiter = options && options.delimiter || '/'\n  var res\n\n  while ((res = PATH_REGEXP.exec(str)) != null) {\n    var m = res[0]\n    var escaped = res[1]\n    var offset = res.index\n    path += str.slice(index, offset)\n    index = offset + m.length\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1]\n      continue\n    }\n\n    var next = str[index]\n    var prefix = res[2]\n    var name = res[3]\n    var capture = res[4]\n    var group = res[5]\n    var modifier = res[6]\n    var asterisk = res[7]\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path)\n      path = ''\n    }\n\n    var partial = prefix != null && next != null && next !== prefix\n    var repeat = modifier === '+' || modifier === '*'\n    var optional = modifier === '?' || modifier === '*'\n    var delimiter = res[2] || defaultDelimiter\n    var pattern = capture || group\n\n    tokens.push({\n      name: name || key++,\n      prefix: prefix || '',\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      partial: partial,\n      asterisk: !!asterisk,\n      pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')\n    })\n  }\n\n  // Match any characters still remaining.\n  if (index < str.length) {\n    path += str.substr(index)\n  }\n\n  // If the path exists, push it onto the end.\n  if (path) {\n    tokens.push(path)\n  }\n\n  return tokens\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile (str, options) {\n  return tokensToFunction(parse(str, options), options)\n}\n\n/**\n * Prettier encoding of URI path segments.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeURIComponentPretty (str) {\n  return encodeURI(str).replace(/[\\/?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeAsterisk (str) {\n  return encodeURI(str).replace(/[?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction (tokens, options) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length)\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$', flags(options))\n    }\n  }\n\n  return function (obj, opts) {\n    var path = ''\n    var data = obj || {}\n    var options = opts || {}\n    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i]\n\n      if (typeof token === 'string') {\n        path += token\n\n        continue\n      }\n\n      var value = data[token.name]\n      var segment\n\n      if (value == null) {\n        if (token.optional) {\n          // Prepend partial segment prefixes.\n          if (token.partial) {\n            path += token.prefix\n          }\n\n          continue\n        } else {\n          throw new TypeError('Expected \"' + token.name + '\" to be defined')\n        }\n      }\n\n      if (isarray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but received `' + JSON.stringify(value) + '`')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) {\n            continue\n          } else {\n            throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n          }\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j])\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\", but received `' + JSON.stringify(segment) + '`')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment\n        }\n\n        continue\n      }\n\n      segment = token.asterisk ? encodeAsterisk(value) : encode(value)\n\n      if (!matches[i].test(segment)) {\n        throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but received \"' + segment + '\"')\n      }\n\n      path += token.prefix + segment\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString (str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|\\/\\\\])/g, '\\\\$1')\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$\\/()])/g, '\\\\$1')\n}\n\n/**\n * Attach the keys as a property of the regexp.\n *\n * @param  {!RegExp} re\n * @param  {Array}   keys\n * @return {!RegExp}\n */\nfunction attachKeys (re, keys) {\n  re.keys = keys\n  return re\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags (options) {\n  return options && options.sensitive ? '' : 'i'\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {!Array}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g)\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        partial: false,\n        asterisk: false,\n        pattern: null\n      })\n    }\n  }\n\n  return attachKeys(path, keys)\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array}   keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = []\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source)\n  }\n\n  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options))\n\n  return attachKeys(regexp, keys)\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {!Array}  keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction stringToRegexp (path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options)\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}          tokens\n * @param  {(Array|Object)=} keys\n * @param  {Object=}         options\n * @return {!RegExp}\n */\nfunction tokensToRegExp (tokens, keys, options) {\n  if (!isarray(keys)) {\n    options = /** @type {!Object} */ (keys || options)\n    keys = []\n  }\n\n  options = options || {}\n\n  var strict = options.strict\n  var end = options.end !== false\n  var route = ''\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i]\n\n    if (typeof token === 'string') {\n      route += escapeString(token)\n    } else {\n      var prefix = escapeString(token.prefix)\n      var capture = '(?:' + token.pattern + ')'\n\n      keys.push(token)\n\n      if (token.repeat) {\n        capture += '(?:' + prefix + capture + ')*'\n      }\n\n      if (token.optional) {\n        if (!token.partial) {\n          capture = '(?:' + prefix + '(' + capture + '))?'\n        } else {\n          capture = prefix + '(' + capture + ')?'\n        }\n      } else {\n        capture = prefix + '(' + capture + ')'\n      }\n\n      route += capture\n    }\n  }\n\n  var delimiter = escapeString(options.delimiter || '/')\n  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter\n\n  // In non-strict mode we allow a slash at the end of match. If the path to\n  // match already ends with a slash, we remove it for consistency. The slash\n  // is valid at the end of a path match, not in the middle. This is important\n  // in non-ending mode, where \"/test/\" shouldn't match \"/test//route\".\n  if (!strict) {\n    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?'\n  }\n\n  if (end) {\n    route += '$'\n  } else {\n    // In non-ending mode, we need the capturing groups to match as much as\n    // possible by using a positive lookahead to the end or next path segment.\n    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)'\n  }\n\n  return attachKeys(new RegExp('^' + route, flags(options)), keys)\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {(Array|Object)=}       keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  if (!isarray(keys)) {\n    options = /** @type {!Object} */ (keys || options)\n    keys = []\n  }\n\n  options = options || {}\n\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, /** @type {!Array} */ (keys))\n  }\n\n  if (isarray(path)) {\n    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)\n  }\n\n  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","parse","str","options","tokens","key","index","path","defaultDelimiter","delimiter","res","PATH_REGEXP","exec","m","escaped","offset","slice","length","next","prefix","name","capture","group","modifier","asterisk","push","partial","repeat","optional","pattern","replace","escapeString","substr","encodeURIComponentPretty","encodeURI","c","charCodeAt","toString","toUpperCase","encodeAsterisk","tokensToFunction","matches","Array","i","RegExp","sensitive","obj","opts","data","encode","pretty","encodeURIComponent","token","value","TypeError","isarray","JSON","stringify","j","segment","test","attachKeys","re","keys","tokensToRegExp","strict","end","route","endsWithDelimiter","pathToRegexp","groups","source","match","parts","regexp","join","compile"]
}
