{"version":3,"sources":["wscljs/client.cljs"],"mappings":";AAMA,uBAAA,vBAAMA,sDAAQC;AAAd,AAAA;AAEE,IAAAC,cAAOG;IAAPF,cAAS,AAAcF;AAAvB,AAAA,oBAAA,CAAAC,4CAAAA,0CAAA,IAAAC,eAAAD,sBAAA,IAAAC;AAAA;;AAAA,oBAAA,CAAAD,4CAAAA,0CAAA,IAAAC,eAAAD,sBAAA,IAAAC;AAAA;;AAAA,oBAAA,CAAAD,4CAAAA,0CAAA,IAAAC,eAAAD,sBAAA,IAAAC;AAAA;;AAAA,oBAAA,CAAAD,4CAAAA,0CAAA,IAAAC,eAAAD,sBAAA,IAAAC;AAAA;;AAAA,MAAA,KAAAC,MAAA,CAAA,mEAAAD;;;;;;AAMF;;;;;;;;;;;;;;;;;;;;;;;uBAAA,mCAAAG,1DAAMI,sDAsBHC;AAtBH,AAAA,IAAAJ,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;kBAAAA,dAsByDS;cAtBzD,AAAAP,4CAAAF,eAAA,rEAsBeK;iBAtBf,AAAAH,4CAAAF,eAAA,xEAsBuBM;eAtBvB,AAAAJ,4CAAAF,eAAA,tEAsBkCO;eAtBlC,AAAAL,4CAAAF,eAAA,tEAsB2CQ;AAtB3C,AAAA,GAuBS,2DAAA,3DAACE,sKAAyCD;AAvBnD;AAAA,AAAA,MAAA,KAAAZ,MAAA;;;AAwBE,IAAAc,qBAAc,KAAAE,UAAeT;AAA7B,AAAA,oBAAAO;AAAA,WAAAA,PAASC;AAAT,AACE,AACE,CAAM,AAAUA,cAAMP;;AACtB,CAAM,AAAaO,iBAAMN;;AACzB,CAAM,AAAWM,eAAML;;AACvB,CAAM,AAAWK,eAAMJ;;AACvBI;;AACF,MAAO,KAAAf,MAAW,CAAA,6EAAsCO;;;AAE5D,AAAA;;;qBAAA,6BAAAU,lDAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,iDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,iDAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAnB,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,mDAAA,nDAAMmB,8DAEFtB,OAAOuB;AAFX,AAGG,OAACC,iDAAKxB,OAAOuB,KAAKE;;;AAHrB,CAAA,mDAAA,nDAAMH,8DAIFtB,OAAOuB,KAAKG;AAJhB,AAAA,GAKU,2DAAA,3DAACV,yJAAkChB;AAL7C;AAAA,AAAA,MAAA,KAAAG,MAAA;;;AAMG,OAAOH,YAAO,AAAC2B,oBAAUD,OAAOH;;;AANnC,CAAA,6CAAA,7CAAMD;;AAAN,AAQA;;;sBAAA,tBAAMM,oDAEH5B;AAFH,AAGE,OAAQA","names":["wscljs.client/status","socket","pred__13044","expr__13045","js/Error","cljs.core/=","p__13047","map__13048","cljs.core/--destructure-map","cljs.core.get","wscljs.client/create","url","on-open","on-message","on-close","on-error","handler-map","cljs.spec.alpha.valid_QMARK_","temp__5751__auto__","sock","js/WebSocket","var_args","G__13050","wscljs.client/send","data","wscljs.client.send","wscljs.format/identity","format","wscljs.format/write","wscljs.client/close"],"sourcesContent":["(ns wscljs.client\n  (:require [wscljs.format :as fmt]\n            [wscljs.spec :as ws-spec]\n            [cljs.spec.alpha :as s]))\n\n\n(defn status [socket]\n  \"Retrieves the connection status of the socket.\"\n  (condp = (.-readyState socket)\n    0 :connecting\n    1 :open\n    2 :stopping\n    3 :stopped))\n\n(defn create\n  \"Starts a websocket connection and returns it.\n\n  Takes the following arguments:\n\n  url         => the websocket url\n  handler-map => a hashmap containing handler functions mapping to:\n\n                 - :on-open    => called when opening a socket connection\n                 - :on-message => called when recieving message on the socket\n                 - :on-close   => called when closing a socket connection\n\n  Usage:\n\n  (require '[wscljs.client :as ws]\n           '[wscljs.format :as fmt])\n\n\n  (def socket (ws/create \\\"ws://....\\\" handler-map))\n\n  (ws/send socket data fmt/json)\n  \"\n  [url {:keys [on-open on-message on-close on-error] :as handler-map}]\n  {:pre [(s/valid? ::ws-spec/websocket-handler-map handler-map)]}\n  (if-let [sock (js/WebSocket. url)]\n    (do\n      (set! (.-onopen sock) on-open)\n      (set! (.-onmessage sock) on-message)\n      (set! (.-onclose sock) on-close)\n      (set! (.-onerror sock) on-error)\n      sock)\n    (throw (js/Error. (str \"Web socket connection failed: \" url)))))\n\n(defn send\n  \"Sends data over socket in the specified format.\"\n  ([socket data]\n   (send socket data fmt/identity))\n  ([socket data format]\n   {:pre [(s/valid? ::ws-spec/websocket-open socket)]}\n   (.send socket (fmt/write format data))))\n\n(defn close\n  \"Closes the socket connection.\"\n  [socket]\n  (.close socket))\n"]}