{"version":3,"sources":["reagent/impl/template.cljs"],"mappings":"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","names":["reagent.impl.template/re-tag","this__4491__auto__","writer__4492__auto__","opt__4493__auto__","cljs.core/-write","reagent.impl.template/NativeWrapper","reagent.impl.template/->NativeWrapper","tag","id","className","reagent.impl.template/hiccup-tag?","x","reagent.impl.util/named?","reagent.impl.template/valid-tag?","cljs.core/ifn?","reagent.impl.template/prop-name-cache","reagent.impl.template/cache-get","o","k","reagent.impl.template.goog$module$goog$object.get","reagent.impl.template/cached-prop-name","temp__5755__auto__","k'","cljs.core/name","v","reagent.impl.util/dash-to-prop-name","reagent.impl.template.goog$module$goog$object.set","reagent.impl.template/js-val?","goog/typeOf","reagent.impl.template/kv-conv","G__21678","reagent.impl.template/convert-prop-value","cljs.core/map?","cljs.core/reduce-kv","cljs.core/coll?","cljs.core/clj->js","args","cljs.core.apply","reagent.impl.template/custom-prop-name-cache","reagent.impl.template/cached-custom-prop-name","reagent.impl.template/custom-kv-conv","G__21679","reagent.impl.template/convert-custom-prop-value","reagent.impl.template/set-id-class","props","id-class","class","G__21680","cljs.core.assoc","reagent.impl.util.class_names","reagent.impl.template/convert-props","G__21681","js/reagent","js/reagent.impl","js/reagent.impl.template","js/reagent.impl.template.find-dom-node","reagent.impl.template/find-dom-node","reagent.impl.template/these-inputs-have-selection-api","reagent.impl.template/has-selection-api?","input-type","cljs.core/contains?","p__21682","map__21683","cljs.core/--destructure-map","cljs.core.get","reagent.impl.template/input-node-set-value","node","rendered-value","dom-value","component","on-write","js/document","cljs.core/fn?","node-value","cljs.core.not_EQ_","reagent.impl.batching/do-after-render","reagent.impl.template/input-component-set-value","existing-offset-from-end","cljs.core/count","new-cursor-offset","this","reagent.impl.template/input-handle-change","on-change","e","reagent.impl.template/input-render-setup","jsprops","and__4251__auto__","js/Error","value","p1__21684#","reagent.impl.template/input-unmount","reagent.impl.template/input-component?","G__21685","reagent.impl.template/reagent-input-class","reagent.impl.template/input-spec","argv","first-child","reagent.impl.component/*current-component*","reagent.impl.template/make-element","reagent.impl.template/reagent-input","reagent.impl.component/create-class","reagent.impl.template/HiccupTag","reagent.impl.template/->HiccupTag","custom","reagent.impl.template/parse-tag","hiccup-tag","vec__21686","cljs.core.nth","cljs.core/re-matches","cljs.core/next","clojure.string/replace","reagent.impl.component/comp-name","reagent.impl.template/try-get-key","e21689","reagent.impl.template/get-key","reagent.impl.template/key-from-vec","cljs.core/meta","reagent.impl.template/reag-element","c","reagent.impl.component/as-class","temp__5757__auto__","key","js/module$node_modules$react$index.createElement","reagent.impl.template/fragment-element","hasprops","or__4253__auto__","js/module$node_modules$react$index.Fragment","reagent.impl.template/adapt-react-class","reagent.impl.template/tag-name-cache","reagent.impl.template/cached-parse","s","reagent.impl.template/native-element","parsed","first","G__21690","cljs.core/with-meta","reagent.impl.template/as-element","reagent.impl.template/str-coll","coll","clojure.walk/prewalk","n","reagent.impl.util/fun-name","G__21692","cljs.core._EQ_","cljs.core.symbol","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","reagent.impl.template/hiccup-err","seq21693","G__21694","cljs.core/first","self__4851__auto__","msg","cljs.core/str","reagent.impl.template/vec-to-elem","reagent.impl.template.hiccup_err","cljs.core/keyword-identical?","pos","G__21695","cljs.core.subs","cljs.core/vector?","cljs.core/seq?","reagent.impl.template/expand-seq-check","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/IPrintWithWriter","cljs.core.pr_str","reagent.impl.component/as-element","reagent.impl.template/expand-seq","cljs.core.into_array","cljs.core.map","reagent.impl.template/expand-seq-dev","val","vec__21697","ctx","res","derefed","reagent.ratom/check-derefs","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","G__21700","a"],"sourcesContent":["(ns reagent.impl.template\n  (:require [react :as react]\n            [clojure.string :as string]\n            [clojure.walk :refer [prewalk]]\n            [reagent.impl.util :as util :refer [is-client named?]]\n            [reagent.impl.component :as comp]\n            [reagent.impl.batching :as batch]\n            [reagent.ratom :as ratom]\n            [reagent.debug :refer-macros [dbg prn println log dev?\n                                          warn warn-unless]]\n            [goog.object :as gobj]))\n\n(declare as-element)\n\n;; From Weavejester's Hiccup, via pump:\n(def ^{:doc \"Regular expression that parses a CSS-style id and class\n             from a tag name.\"}\n  re-tag #\"([^\\s\\.#]+)(?:#([^\\s\\.#]+))?(?:\\.([^\\s#]+))?\")\n\n(deftype NativeWrapper [tag id className])\n\n\n;;; Common utilities\n\n(defn ^boolean hiccup-tag? [x]\n  (or (named? x)\n      (string? x)))\n\n(defn ^boolean valid-tag? [x]\n  (or (hiccup-tag? x)\n      (ifn? x)\n      (instance? NativeWrapper x)))\n\n\n;;; Props conversion\n\n(def prop-name-cache #js{:class \"className\"\n                         :for \"htmlFor\"\n                         :charset \"charSet\"})\n\n(defn cache-get [o k]\n  (when ^boolean (.hasOwnProperty o k)\n    (gobj/get o k)))\n\n(defn cached-prop-name [k]\n  (if (named? k)\n    (if-some [k' (cache-get prop-name-cache (name k))]\n      k'\n      (let [v (util/dash-to-prop-name k)]\n        (gobj/set prop-name-cache (name k) v)\n        v))\n    k))\n\n(defn ^boolean js-val? [x]\n  (not (identical? \"object\" (goog/typeOf x))))\n\n(declare convert-prop-value)\n\n(defn kv-conv [o k v]\n  (doto o\n    (gobj/set (cached-prop-name k) (convert-prop-value v))))\n\n(defn convert-prop-value [x]\n  (cond (js-val? x) x\n        (named? x) (name x)\n        (map? x) (reduce-kv kv-conv #js{} x)\n        (coll? x) (clj->js x)\n        (ifn? x) (fn [& args]\n                   (apply x args))\n        :else (clj->js x)))\n\n;; Previous few functions copied for custom elements,\n;; without mapping from class to className etc.\n\n(def custom-prop-name-cache #js{})\n\n(defn cached-custom-prop-name [k]\n  (if (named? k)\n    (if-some [k' (cache-get custom-prop-name-cache (name k))]\n      k'\n      (let [v (util/dash-to-prop-name k)]\n        (gobj/set custom-prop-name-cache (name k) v)\n        v))\n    k))\n\n(defn custom-kv-conv [o k v]\n  (doto o\n    (gobj/set (cached-custom-prop-name k) (convert-prop-value v))))\n\n(defn convert-custom-prop-value [x]\n  (cond (js-val? x) x\n        (named? x) (name x)\n        (map? x) (reduce-kv custom-kv-conv #js{} x)\n        (coll? x) (clj->js x)\n        (ifn? x) (fn [& args]\n                   (apply x args))\n        :else (clj->js x)))\n\n(defn set-id-class\n  \"Takes the id and class from tag keyword, and adds them to the\n  other props. Parsed tag is JS object with :id and :class properties.\"\n  [props id-class]\n  (let [id (.-id id-class)\n        class (.-className id-class)]\n    (cond-> props\n      ;; Only use ID from tag keyword if no :id in props already\n      (and (some? id)\n           (nil? (:id props)))\n      (assoc :id id)\n\n      ;; Merge classes\n      class\n      (assoc :class (util/class-names class (:class props))))))\n\n(defn convert-props [props ^clj id-class]\n  (let [class (:class props)\n        props (-> props\n                  (cond-> class (assoc :class (util/class-names class)))\n                  (set-id-class id-class))]\n    (if (.-custom id-class)\n      (convert-custom-prop-value props)\n      (convert-prop-value props))))\n\n;;; Specialization for input components\n\n;; This gets set from reagent.dom\n(defonce find-dom-node nil)\n\n;; <input type=\"??\" >\n;; The properites 'selectionStart' and 'selectionEnd' only exist on some inputs\n;; See: https://html.spec.whatwg.org/multipage/forms.html#do-not-apply\n(def these-inputs-have-selection-api #{\"text\" \"textarea\" \"password\" \"search\"\n                                       \"tel\" \"url\"})\n\n(defn ^boolean has-selection-api?\n  [input-type]\n  (contains? these-inputs-have-selection-api input-type))\n\n(declare input-component-set-value)\n\n(defn input-node-set-value\n  [node rendered-value dom-value ^clj component {:keys [on-write]}]\n  (if-not (and (identical? node (.-activeElement js/document))\n            (has-selection-api? (.-type node))\n            (string? rendered-value)\n            (string? dom-value))\n    ;; just set the value, no need to worry about a cursor\n    (do\n      (set! (.-cljsDOMValue component) rendered-value)\n      (set! (.-value node) rendered-value)\n      (when (fn? on-write)\n        (on-write rendered-value)))\n\n    ;; Setting \"value\" (below) moves the cursor position to the\n    ;; end which gives the user a jarring experience.\n    ;;\n    ;; But repositioning the cursor within the text, turns out to\n    ;; be quite a challenge because changes in the text can be\n    ;; triggered by various events like:\n    ;; - a validation function rejecting a user inputted char\n    ;; - the user enters a lower case char, but is transformed to\n    ;;   upper.\n    ;; - the user selects multiple chars and deletes text\n    ;; - the user pastes in multiple chars, and some of them are\n    ;;   rejected by a validator.\n    ;; - the user selects multiple chars and then types in a\n    ;;   single new char to repalce them all.\n    ;; Coming up with a sane cursor repositioning strategy hasn't\n    ;; been easy ALTHOUGH in the end, it kinda fell out nicely,\n    ;; and it appears to sanely handle all the cases we could\n    ;; think of.\n    ;; So this is just a warning. The code below is simple\n    ;; enough, but if you are tempted to change it, be aware of\n    ;; all the scenarios you have handle.\n    (let [node-value (.-value node)]\n      (if (not= node-value dom-value)\n        ;; IE has not notified us of the change yet, so check again later\n        (batch/do-after-render #(input-component-set-value component))\n        (let [existing-offset-from-end (- (count node-value)\n                                         (.-selectionStart node))\n              new-cursor-offset        (- (count rendered-value)\n                                         existing-offset-from-end)]\n          (set! (.-cljsDOMValue component) rendered-value)\n          (set! (.-value node) rendered-value)\n          (when (fn? on-write)\n            (on-write rendered-value))\n          (set! (.-selectionStart node) new-cursor-offset)\n          (set! (.-selectionEnd node) new-cursor-offset))))))\n\n(defn input-component-set-value [^clj this]\n  (when (.-cljsInputLive this)\n    (set! (.-cljsInputDirty this) false)\n    (let [rendered-value (.-cljsRenderedValue this)\n          dom-value (.-cljsDOMValue this)\n          ;; Default to the root node within this component\n          node (find-dom-node this)]\n      (when (not= rendered-value dom-value)\n        (input-node-set-value node rendered-value dom-value this {})))))\n\n(defn input-handle-change [^clj this on-change e]\n  (set! (.-cljsDOMValue this) (-> e .-target .-value))\n  ;; Make sure the input is re-rendered, in case on-change\n  ;; wants to keep the value unchanged\n  (when-not (.-cljsInputDirty this)\n    (set! (.-cljsInputDirty this) true)\n    (batch/do-after-render #(input-component-set-value this)))\n  (on-change e))\n\n(defn input-render-setup\n  [^clj this ^js jsprops]\n  ;; Don't rely on React for updating \"controlled inputs\", since it\n  ;; doesn't play well with async rendering (misses keystrokes).\n  (when (and (some? jsprops)\n             (.hasOwnProperty jsprops \"onChange\")\n             (.hasOwnProperty jsprops \"value\"))\n    (assert find-dom-node\n            \"reagent.dom needs to be loaded for controlled input to work\")\n    (let [v (.-value jsprops)\n          value (if (nil? v) \"\" v)\n          on-change (.-onChange jsprops)]\n      (when-not (.-cljsInputLive this)\n        ;; set initial value\n        (set! (.-cljsInputLive this) true)\n        (set! (.-cljsDOMValue this) value))\n      (set! (.-cljsRenderedValue this) value)\n      (js-delete jsprops \"value\")\n      (set! (.-defaultValue jsprops) value)\n      (set! (.-onChange jsprops) #(input-handle-change this on-change %)))))\n\n(defn input-unmount [^clj this]\n  (set! (.-cljsInputLive this) nil))\n\n(defn ^boolean input-component? [x]\n  (case x\n    (\"input\" \"textarea\") true\n    false))\n\n(def reagent-input-class nil)\n\n(declare make-element)\n\n(def input-spec\n  {:display-name \"ReagentInput\"\n   :component-did-update input-component-set-value\n   :component-will-unmount input-unmount\n   :reagent-render\n   (fn [argv component jsprops first-child]\n     (let [this comp/*current-component*]\n       (input-render-setup this jsprops)\n       (make-element argv component jsprops first-child)))})\n\n(defn reagent-input\n  []\n  (when (nil? reagent-input-class)\n    (set! reagent-input-class (comp/create-class input-spec)))\n  reagent-input-class)\n\n\n;;; Conversion from Hiccup forms\n\n(deftype HiccupTag [tag id className custom])\n\n(defn parse-tag [hiccup-tag]\n  (let [[tag id className] (->> hiccup-tag name (re-matches re-tag) next)\n        className (when-not (nil? className)\n                    (string/replace className #\"\\.\" \" \"))]\n    (assert tag (str \"Invalid tag: '\" hiccup-tag \"'\" (comp/comp-name)))\n    (->HiccupTag tag\n                 id\n                 className\n                 ;; Custom element names must contain hyphen\n                 ;; https://www.w3.org/TR/custom-elements/#custom-elements-core-concepts\n                 (not= -1 (.indexOf tag \"-\")))))\n\n(defn try-get-key [x]\n  ;; try catch to avoid clojurescript peculiarity with\n  ;; sorted-maps with keys that are numbers\n  (try (get x :key)\n       (catch :default e)))\n\n(defn get-key [x]\n  (when (map? x)\n    (try-get-key x)))\n\n(defn key-from-vec [v]\n  (if-some [k (-> (meta v) get-key)]\n    k\n    (-> v (nth 1 nil) get-key)))\n\n(defn reag-element [tag v]\n  (let [c (comp/as-class tag)\n        jsprops #js {}]\n    (set! (.-argv jsprops) v)\n    (when-some [key (key-from-vec v)]\n      (set! (.-key jsprops) key))\n    (react/createElement c jsprops)))\n\n(defn fragment-element [argv]\n  (let [props (nth argv 1 nil)\n        hasprops (or (nil? props) (map? props))\n        jsprops (or (convert-prop-value (if hasprops props))\n                    #js {})\n        first-child (+ 1 (if hasprops 1 0))]\n    (when-some [key (key-from-vec argv)]\n      (set! (.-key jsprops) key))\n    (make-element argv react/Fragment jsprops first-child)))\n\n(defn adapt-react-class\n  [c]\n  (->NativeWrapper c nil nil))\n\n(def tag-name-cache #js{})\n\n(defn cached-parse [x]\n  (if-some [s (cache-get tag-name-cache x)]\n    s\n    (let [v (parse-tag x)]\n      (gobj/set tag-name-cache x v)\n      v)))\n\n(defn native-element [parsed argv first]\n  (let [component (.-tag parsed)\n        props (nth argv first nil)\n        hasprops (or (nil? props) (map? props))\n        jsprops (or (convert-props (if hasprops props) parsed)\n                    #js {})\n        first-child (+ first (if hasprops 1 0))]\n    (if (input-component? component)\n      (-> [(reagent-input) argv component jsprops first-child]\n          (with-meta (meta argv))\n          as-element)\n      (do\n        (when-some [key (-> (meta argv) get-key)]\n          (set! (.-key jsprops) key))\n        (make-element argv component jsprops first-child)))))\n\n(defn str-coll [coll]\n  (if (dev?)\n    (str (prewalk (fn [x]\n                    (if (fn? x)\n                      (let [n (util/fun-name x)]\n                        (case n\n                          (\"\" nil) x\n                          (symbol n)))\n                      x)) coll))\n    (str coll)))\n\n(defn hiccup-err [v & msg]\n  (str (apply str msg) \": \" (str-coll v) \"\\n\" (comp/comp-name)))\n\n(defn vec-to-elem [v]\n  (assert (pos? (count v)) (hiccup-err v \"Hiccup form should not be empty\"))\n  (let [tag (nth v 0 nil)]\n    (assert (valid-tag? tag) (hiccup-err v \"Invalid Hiccup form\"))\n    (cond\n      (keyword-identical? :<> tag)\n      (fragment-element v)\n\n      (hiccup-tag? tag)\n      (let [n (name tag)\n            pos (.indexOf n \">\")]\n        (case pos\n          -1 (native-element (cached-parse n) v 1)\n          0 (let [component (nth v 1 nil)]\n              ;; Support [:> component ...]\n              (assert (= \">\" n) (hiccup-err v \"Invalid Hiccup tag\"))\n              (native-element (->HiccupTag component nil nil nil) v 2))\n          ;; Support extended hiccup syntax, i.e :div.bar>a.foo\n          ;; Apply metadata (e.g. :key) to the outermost element.\n          ;; Metadata is probably used only with sequeneces, and in that case\n          ;; only the key of the outermost element matters.\n          (recur (with-meta [(subs n 0 pos)\n                             (assoc (with-meta v nil) 0 (subs n (inc pos)))]\n                            (meta v)))))\n\n      (instance? NativeWrapper tag)\n      (native-element tag v 1)\n\n      :else (reag-element tag v))))\n\n(declare expand-seq)\n(declare expand-seq-check)\n\n(defn as-element [x]\n  (cond (js-val? x) x\n        (vector? x) (vec-to-elem x)\n        (seq? x) (if (dev?)\n                   (expand-seq-check x)\n                   (expand-seq x))\n        (named? x) (name x)\n        (satisfies? IPrintWithWriter x) (pr-str x)\n        :else x))\n\n(set! comp/as-element as-element)\n\n(defn expand-seq [s]\n  (into-array (map as-element s)))\n\n(defn expand-seq-dev [s ^clj o]\n  (into-array (map (fn [val]\n                     (when (and (vector? val)\n                                (nil? (key-from-vec val)))\n                       (set! (.-no-key o) true))\n                     (as-element val))\n                   s)))\n\n(defn expand-seq-check [x]\n  (let [ctx #js{}\n        [res derefed] (ratom/check-derefs #(expand-seq-dev x ctx))]\n    (when derefed\n      (warn (hiccup-err x \"Reactive deref not supported in lazy seq, \"\n                        \"it should be wrapped in doall\")))\n    (when (.-no-key ctx)\n      (warn (hiccup-err x \"Every element in a seq should have a unique :key\")))\n    res))\n\n;; From https://github.com/babel/babel/commit/1d0e68f5a19d721fe8799b1ea331041d8bf9120e\n;; (def react-element-type (or (and (exists? js/Symbol)\n;;                                  ($ js/Symbol :for)\n;;                                  ($ js/Symbol for \"react.element\"))\n;;                             60103))\n\n;; (defn make-element-fast [argv comp jsprops first-child]\n;;   (let [key (some-> jsprops ($ :key))\n;;         ref (some-> jsprops ($ :ref))\n;;         props (if (nil? jsprops) (js-obj) jsprops)]\n;;     ($! props :children\n;;         (case (- (count argv) first-child)\n;;           0 nil\n;;           1 (as-element (nth argv first-child))\n;;           (reduce-kv (fn [a k v]\n;;                        (when (>= k first-child)\n;;                          (.push a (as-element v)))\n;;                        a)\n;;                      #js[] argv)))\n;;     (js-obj \"key\" key\n;;             \"ref\" ref\n;;             \"props\" props\n;;             \"$$typeof\" react-element-type\n;;             \"type\" comp\n;;             ;; \"_store\" (js-obj)\n;;             )))\n\n(defn make-element [argv component jsprops first-child]\n  (case (- (count argv) first-child)\n    ;; Optimize cases of zero or one child\n    0 (react/createElement component jsprops)\n\n    1 (react/createElement component jsprops\n          (as-element (nth argv first-child nil)))\n\n    (.apply react/createElement nil\n            (reduce-kv (fn [a k v]\n                         (when (>= k first-child)\n                           (.push a (as-element v)))\n                         a)\n                       #js[component jsprops] argv))))\n"]}